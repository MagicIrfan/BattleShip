@page "/game-multiplayer/{GameId}"
@inject IGameMultiplayerService GameService
@inject IJSRuntime JsRuntime
@inject IModalService Modal
@inject ITokenService TokenService
@inject IUserService IUser
@inject SignalRService _signalRService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@	using System.Net.Http.Headers
@	using Microsoft.AspNetCore.SignalR.Client
@attribute [Authorize]

<main>
    @if (GameService.playerGrid != null && GameService.opponentGrid != null && GameId != null)
    {
        @if (GameService.Player != null)
        {
            <GameProfile User="@GameService.Player"></GameProfile>
        }
        
        <p>@GameService.TurnStatus</p>
        <div class="grids">
            <PlayerGridMultiplayer IsPlacingBoats="GameService.IsPlacingBoat" PositionsData="GameService.playerGrid.PositionsData" OnTogglePlacingBoats="TogglePlacingBoats"></PlayerGridMultiplayer>

            <div class="historique-container">
                @foreach (var item in GameService.historique)
                {
                    <p>@item</p>
                }
            </div>

            <OpponentGrid IsPlacingBoats="GameService.IsPlacingBoat" PositionsData="GameService.opponentGrid.PositionsData" OnAttack="HandleAttack"></OpponentGrid>
        </div>
        @if (GameService.Opponent != null)
        {
            <GameProfile User="@GameService.Opponent"></GameProfile>
        }
    }
    else
    {
        <p>Chargement ...</p>
    }
</main>

<style>
    .grids {
        display: flex;
        flex-grow: 1;
        overflow: hidden;
        position: relative;
        gap: 50px;
        justify-content: center;
        align-items: center;
    }

    .historique-container {
        text-align:center;
        background-color: #f9f9f9;
        border: 1px solid #d1d1d1;
        border-radius: 10px;
        padding: 20px;
        overflow-y: auto;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        width:320px;
        max-height:480px;
    }

        .historique-container h2 {
            font-size: 1.2em;
            margin-bottom: 15px;
            color: #444;
            font-weight: bold;
        }

        .historique-container p {
            font-size: 0.9em;
            margin: 8px 0;
            line-height: 1.5;
            color: #555;
            padding: 8px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

            .historique-container p:hover {
                background-color: #e6f7ff;
            }
</style>

@code {
    [Parameter] public string GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var guidValue = Guid.Parse(GameId);
        await GameService.CreateHubConnection();
        await GameService.StartGame(guidValue);
        GameService.OnStateChanged += async () => await InvokeAsync(StateHasChanged);
        Navigation.LocationChanged += OnLocationChanged;
        await JS.InvokeVoidAsync("window.addEventListener", "beforeunload", EventCallback.Factory.Create(this, async () => await GameService.LeaveGame()));
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await GameService.LeaveGame();
    }

    private async Task HandleAttack(Position position)
    {
        await GameService.Attack(position);
        StateHasChanged();
    }

    private void TogglePlacingBoats()
    {
        GameService.IsPlacingBoat = false;
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}