@page "/game-multiplayer/{GameId}"
@inject IGameMultiplayerService GameService
@inject IJSRuntime JsRuntime
@inject IModalService Modal
@inject ITokenService TokenService
@inject IGameEventService GameEventService
@inject IUserService IUser
@inject SignalRService _signalRService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize]

<main>
    @if (GameService.GetPlayerGrid() != null && GameService.GetOpponentGrid() != null && GameId != null)
    {
        <div class="game-status-container">
            <p class="game-status-text">@GameService.GetTurnStatus()</p>
        </div>

        <div class="game-container">
            <div class="profiles-container">
                <div class="player-profile">
                    @if (GameService.GetPlayer() != null)
                    {
                        <GameProfile User="@GameService.GetPlayer()" />
                    }
                    else
                    {
                        <div class="loader"></div>
                    }
                </div>

                <div class="opponent-profile">
                    @if (GameService.GetOpponent() != null)
                    {
                        <GameProfile User="@GameService.GetOpponent()" />
                    }
                    else
                    {
                        <div class="loader"></div>
                    }
                </div>
            </div>

            <div class="grids-container">
                <PlayerGridMultiplayer IsPlacingBoats="@GameService.IsPlacingBoat()"
                                       PositionsData="GameService.GetPlayerGrid().PositionsData"
                                       OnTogglePlacingBoats="TogglePlacingBoats" />

                <div class="historique-container">
                    <h2>Historique</h2>
                    @foreach (var item in GameService.GetHistorique())
                    {
                        <p>@item</p>
                    }
                </div>

                <OpponentGridMultiplayer
                                  PositionsData="GameService.GetOpponentGrid().PositionsData"
                                  OnAttack="HandleAttack"
                                  IsReady="@GameService.IsReady()" />
            </div>
        </div>
    }
    else
    {
        <p class="loading">Chargement...</p>
    }
</main>

<style>
    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-around;
        width: 100%;
    }

    .game-status-container {
        width: 100%;
        text-align: center;
        margin-bottom: 30px;
    }

    .game-status-text {
        font-size: 2.5rem;
        color: white;
        font-weight: bold;
        margin: 0;
    }

    .profiles-container {
        display: flex;
        justify-content: center;
        gap: 100px;
        width: 100%;
        margin-bottom: 40px;
    }

    .player-profile, .opponent-profile {
        width: 250px;
        min-height: 300px;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        text-align: center; 
    }

    .grids-container {
        display: flex;
        justify-content: space-around;
        align-items: center;
        gap: 30px;
        width: 100%;
        min-height: 400px;
    }

    .historique-container {
        width: 320px;
        max-height: 480px;
        overflow-y: auto;
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        min-height: 300px;
    }

    .loader {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    .loading {
        text-align: center;
        color: white;
        font-size: 1.5rem;
    }
</style>

@code {
    [Parameter] public string GameId { get; set; }

    private void TogglePlacingBoats() => GameService.TogglePlacingBoat();

    protected override async Task OnInitializedAsync()
    {
        var guidValue = Guid.Parse(GameId);
        await GameService.CreateHubConnection();
        await GameService.StartGame(guidValue);
        Navigation.LocationChanged += OnLocationChanged;
        GameEventService.OnStateChanged += async () => await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("window.addEventListener", "beforeunload", EventCallback.Factory.Create(this, async () => await GameService.LeaveGame()));
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await GameService.LeaveGame();
    }

    private async Task HandleAttack(Position position)
    {
        await GameService.Attack(position);
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        GameEventService.OnStateChanged -= async () => await InvokeAsync(StateHasChanged);
    }
}