@page "/multiplayer"
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient HttpClient
@inject ITokenService TokenService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject SignalRService _signalRService

<h3>Multiplayer BattleShip</h3>

<div class="game-container">
    <div class="game-setup join-lobby">
        <h4>Join an Existing Lobby</h4>
        <label>Enter Game ID:</label>
        <div style="display: flex; align-items: center;">
            <input @bind="_gameIdInput" placeholder="Enter Game ID" />
            <button @onclick="() => JoinGame(Guid.TryParse(_gameIdInput, out var gameId) ? gameId : null)" class="join-game-button">Join Game</button>
        </div>
        <label>Available Lobbies:</label>
        <ul class="available-lobbies">
            @foreach (var lobby in _availableLobbies)
            {
            <li>
                <button @onclick="() => JoinGame(lobby.GameId)">Lobby ID: @lobby.GameId</button>
            </li>
            }
        </ul>
    </div>

    <div class="game-setup create-lobby">
        <h4>Create a New Lobby</h4>
        <div class="checkbox-container">
            <label>Is Private ?</label>
            <label class="toggle-label">
                <input type="checkbox" class="toggle-checkbox" @bind="_isPrivate" />
                <span class="slider"></span>
            </label>
        </div>
        <button @onclick="CreateLobby">Create Lobby</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(_message))
{
<p class="error-message">@_message</p>
}

@if (_gameId != Guid.Empty)
{
    <p>Connected to Game ID: <strong>@_gameId</strong></p>
    <button @onclick="LeaveGame" class="leave-button">Leave Game</button>
}

@if (_playerProfiles.Count > 0)
{
<div class="players-section">
    <h4>Players in Game:</h4>
    <div class="player-list">
        @foreach (var player in _playerProfiles)
        {
        <div class="player-card">
            <div class="player-icon">
                @if (_readyPlayers.Contains(player.Id))
                {
                <span class="checkmark">✔️</span>
                }
                @if (!string.IsNullOrEmpty(player.Picture))
                {
                <img src="@player.Picture" alt="Profile Picture" class="profile-picture" />
                }
                else
                {
                <span>👤</span>
                }
            </div>

            <div class="player-id">
                <span>@player.Username</span>
            </div>
        </div>
        }
    </div>
</div>

<button @onclick="SetReady" disabled="@(!IsReadyEnabled)" class="ready-button">
    Prêt
</button>
}


@code {
    private string _gameIdInput = string.Empty;
    private Guid _gameId;
    private HubConnection HubConnection;
    private HashSet<string> _readyPlayers = [];
    private bool IsReadyEnabled => _playerProfiles.Count == 2;
    private string _message = string.Empty;
    private List<PlayerInfo> _playerProfiles = [];
    private string? _profilePicture;
    private string? _playerName;
    private string? _playerId;
    private List<LobbyModel>? _availableLobbies = [];
    private bool _isPrivate;

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetAccessTokenAsync();

        await LoadPlayerProfile();
        await LoadAvailableLobbies();

        HubConnection = _signalRService.GetConnection();

        HubConnection.On<List<PlayerInfo>>("UpdatePlayerList", (playerList) =>
        {
            _playerProfiles.Clear();
            _playerProfiles.AddRange(playerList);
            StateHasChanged(); 
        });

        HubConnection.On<HashSet<string>>("UpdateReadyStatus", (readyPlayersList) =>
        {
            _readyPlayers = new HashSet<string>(readyPlayersList);
            StateHasChanged();
        });

        HubConnection.On("InitializeGame", () =>
        {
            Navigation.NavigateTo($"/game-multiplayer/{_gameId}");
        });

        HubConnection.On("AlreadyJoin", () =>
        {
            _message = "You have already joined this game.";
            StateHasChanged();
        });

        HubConnection.On("GameIsFull", () =>
        {
            _message = "The game is full.";
            StateHasChanged();
        });
        
        await JS.InvokeVoidAsync("window.addEventListener", "beforeunload", EventCallback.Factory.Create(this, async () => await LeaveGame()));
    }
    
    private async Task LoadAvailableLobbies()
    {
        var token = await TokenService.GetAccessTokenAsync();
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await HttpClient.GetAsync("https://localhost:5134/api/multiplayer/lobbies");
        if (response.IsSuccessStatusCode)
        {
            _availableLobbies = await response.Content.ReadFromJsonAsync<List<LobbyModel>>();
        }
    }
    
    private async Task JoinGame(Guid? lobbyId = null)
    {
        _message = string.Empty;

        if (lobbyId.HasValue)
        {
            _gameId = lobbyId.Value; 
        }
        else if (Guid.TryParse(_gameIdInput, out var parsedGameId))
        {
            _gameId = parsedGameId;
        }
        else
        {
            return;
        }

        await HubConnection.SendAsync("JoinLobby", _gameId, _playerName, _profilePicture); 
        _playerProfiles.Clear();
    }

    private async Task CreateLobby()
    {
        _gameId = Guid.NewGuid();
        _message = string.Empty;
        await HubConnection.SendAsync("CreateLobby", _gameId, _playerName, _profilePicture, _isPrivate);
    }

    private async Task LeaveGame()
    {
        await HubConnection.SendAsync("LeaveGame", _gameId);
        _gameId = Guid.Empty; 
        _playerProfiles.Clear();
        _readyPlayers.Clear();
        _message = string.Empty;
        StateHasChanged();
    }

    private async Task SetReady()
    {
        await HubConnection.SendAsync("SetReady", _gameId);
    }

    private async Task LoadPlayerProfile()
    {
        try
        {
            var token = await TokenService.GetAccessTokenAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await HttpClient.GetAsync("https://localhost:5134/api/auth/profile");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            
                if (content!.TryGetValue("userName", out var username))
                {
                    _playerName = username; 
                }

                if (content.TryGetValue("picture", out var picture))
                {
                    _profilePicture = picture;
                }
            }
            else
            {
                throw new Exception("Failed to load player profile");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    public void Dispose()
    {
        if (HubConnection != null)
        {
            LeaveGame().GetAwaiter().GetResult();
            HubConnection.DisposeAsync();
        }
    }
}

<style>
    .error-message {
        color: red;
        font-weight: bold;
        margin-top: 0.5em;
    }

    .game-container {
        display: flex;
        height: 50vh;
    }

    .game-setup {
        margin-bottom: 1em;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        height: 100%; 
        box-sizing: border-box; 
    }

    .join-lobby {
        width: 50%; 
    }

    .create-lobby {
        width: 50%; 
    }

    .game-setup h4 {
        margin-bottom: 0.5em;
    }

    .game-setup label {
        margin: 0.5em 0;
    }

    .game-setup {
        display: flex;
        align-items: center;
    }

    .game-setup input {
        width: calc(100% - 110px); 
        padding: 0.5em;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-bottom: 1em;
    }

    .join-game-button {
        padding: 0.5em 1em;
        margin-left: 10px;
    }

    .available-lobbies {
        list-style-type: none;
        padding: 0;
    }

    .available-lobbies li {
        margin: 0.5em 0;
    }

    button {
        background-color: #007BFF;
        color: white;
        padding: 0.5em 1em;
        font-size: 1em;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        width: 100%; 
    }

    button:hover {
        background-color: #0056b3;
    }

    .leave-button {
        background-color: #ff6b6b;
    }

    .leave-button:hover {
        background-color: #ff4c4c;
    }

    .players-section {
        margin-top: 1em;
    }

    .player-list {
        display: flex;
        flex-wrap: wrap;
    }

    .player-card {
        border: 1px solid #ccc;
        padding: 1em;
        margin: 0.5em;
        text-align: center;
        width: 120px;
        background-color: #f9f9f9;
        border-radius: 8px;
        position: relative;
    }

    .player-icon {
        font-size: 2em;
    }

    .player-id {
        margin-top: 0.5em;
        font-weight: bold;
    }

    .ready-button {
        display: block;
        margin-top: 1em;
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 0.5em 2em;
        font-size: 1em;
        border-radius: 4px;
        cursor: pointer;
    }

    .ready-button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .profile-picture {
        width: 40px;
        height: 40px;
        border-radius: 50%;
    }

    .checkmark {
        position: absolute;
        top: -10px;
        right: -10px;
        font-size: 1.5em;
        color: green;
    }

    .checkbox-container {
        display: flex;
        align-items: center;
    }

    .toggle-checkbox {
        display: none;
    }

    .toggle-label {
        cursor: pointer;
        width: 50px; 
        height: 26px;
        background-color: #ccc;
        border-radius: 13px; 
        position: relative;
        transition: background-color 0.3s;
    }

    .toggle-checkbox {
        display: none; 
    }

    .toggle-label:before {
        content: "";
        position: absolute;
        width: 22px; 
        height: 22px;
        background-color: white;
        border-radius: 50%; 
        top: 2px; 
        left: 2px; 
        transition: transform 0.3s ease-in-out;
    }

    .toggle-checkbox:checked + .toggle-label {
        background-color: #4CAF50;
    }

    .toggle-checkbox:checked + .toggle-label:before {
        transform: translateX(24px); 
    }
    
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 13px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 22px;
        width: 22px;
        left: 2px;
        bottom: 2px;
        background-color: white;
        transition: 0.4s;
        border-radius: 50%;
    }

    .toggle-checkbox:checked + .slider {
        background-color: #4CAF50;
    }

    .toggle-checkbox:checked + .slider:before {
        transform: translateX(24px);
    }
</style>

