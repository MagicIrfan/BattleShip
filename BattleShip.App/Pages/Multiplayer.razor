@page "/multiplayer"
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject ITokenService TokenService

<h3>Multiplayer BattleShip</h3>

<div class="game-setup">
    <label>Enter Game ID (or create new one):</label>
    <input @bind="gameIdInput" placeholder="Enter or generate a Game ID" />
    <button @onclick="JoinGame">Join Game</button>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <p class="error-message">@message</p>
}

@if (gameId != Guid.Empty)
{
    <p>Connected to Game ID: <strong>@gameId</strong></p>
    <button @onclick="LeaveGame" class="leave-button">Leave Game</button>
}

@if (players.Count > 0)
{
    <div class="players-section">
        <h4>Players in Game:</h4>
        <div class="player-list">
            @foreach (var player in players)
            {
            <div class="player-card">
                <div class="player-icon">
                    @if (readyPlayers.Contains(player))
                    {
                    <span class="checkmark">✔️</span>
                    }

                    @if (playerProfiles.ContainsKey(player))
                    {
                        <img src="@playerProfiles[player]" alt="Profile Picture" class="profile-picture" />
                    }
                    else
                    {
                        <span>👤</span> <!-- Emoji par défaut si l'image n'est pas disponible -->
                    }
                </div>

                <div class="player-id">
                    @if (playerProfiles.ContainsKey(player))
                    {
                        @playerProfiles[player]
                    }
                    else
                    {
                        <span>@player</span> <!-- Afficher l'ID si le nom d'utilisateur n'est pas disponible -->
                    }
                </div>
            </div>
            }

        </div>
    </div>

    <button @onclick="SetReady" disabled="@(!IsReadyEnabled)" class="ready-button">
        Prêt
    </button>

}

@code {
    private string gameIdInput = string.Empty;
    private Guid gameId;
    private HubConnection HubConnection;
    private List<string> players = new();
    private HashSet<string> readyPlayers = new();
    private bool IsReadyEnabled => players.Count == 2;
    private string message = string.Empty;
    private Dictionary<string, string> playerProfiles = new(); // Nouveau dictionnaire pour stocker les profils
    private string profilePicture = "👤"; // Par défaut
    private string playerName = "Player"; // Nom par défaut

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetAccessTokenAsync();

        HubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:5134/gamehub", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token)!;
            })
            .Build();

        HubConnection.On<List<string>>("UpdatePlayerList", async (playerList) =>
        {
            players = playerList; 
            await LoadPlayerProfiles();
            StateHasChanged(); 
        });

        HubConnection.On<HashSet<string>>("UpdateReadyStatus", (readyPlayersList) =>
        {
            readyPlayers = new HashSet<string>(readyPlayersList);
            StateHasChanged();
        });

        HubConnection.On("AlreadyJoin", () =>
        {
            message = "You have already joined this game.";
            StateHasChanged();
        });

        HubConnection.On("GameIsFull", () =>
        {
            message = "The game is full.";
            StateHasChanged();
        });

        await HubConnection.StartAsync();
    }
    
    private async Task JoinGame()
    {
        message = string.Empty;
        if (Guid.TryParse(gameIdInput, out var parsedGameId))
        {
            gameId = parsedGameId;
        }
        else
        {
            gameId = Guid.NewGuid();
            gameIdInput = gameId.ToString();
        }

        await HubConnection.SendAsync("JoinLobby", gameId);
        players.Clear();
    }

    private async Task LeaveGame()
    {
        await HubConnection.SendAsync("LeaveGame", gameId);
        gameId = Guid.Empty; 
        players.Clear();
        message = string.Empty;
        StateHasChanged();
    }

    private async Task SetReady()
    {
        await HubConnection.SendAsync("SetReady", gameId);
    }

    private async Task LoadPlayerProfiles()
    {
        try
        {
            var token = await TokenService.GetAccessTokenAsync();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await HttpClient.GetAsync("https://localhost:5134/api/auth/profile");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
            }
            else
            {
                throw new Exception("Failed to load player profiles");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}


<style>
    .error-message {
        color: red;
        font-weight: bold;
        margin-top: 0.5em;
    }
    
    .game-setup {
        margin-bottom: 1em;
    }

    .players-section {
        margin-top: 1em;
    }

    .player-list {
        display: flex;
        flex-wrap: wrap;
    }

    .player-card {
        border: 1px solid #ccc;
        padding: 1em;
        margin: 0.5em;
        text-align: center;
        width: 120px;
        background-color: #f9f9f9;
        border-radius: 8px;
        position: relative;
    }

    .player-icon {
        font-size: 2em;
    }

    .player-id {
        margin-top: 0.5em;
        font-weight: bold;
    }

    .leave-button {
        background-color: #ff6b6b;
        border: none;
        color: white;
        padding: 0.5em 1em;
        font-size: 1em;
        border-radius: 4px;
        cursor: pointer;
    }

    .ready-button {
        display: block;
        margin-top: 1em;
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 0.5em 2em;
        font-size: 1em;
        border-radius: 4px;
        cursor: pointer;
    }

    .ready-button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .profile-picture {
        width: 40px;
        height: 40px;
        border-radius: 50%;
    }

    .checkmark {
        position: absolute;
        top: -10px;
        right: -10px;
        font-size: 1.5em;
        color: green;
    }
</style>
