@page "/game"
@inject IGameService GameService
@inject IGameEventService GameEventService
@inject IJSRuntime JsRuntime
@inject IModalService Modal
@inject IUserService UserService
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.SignalR.Client

@attribute [Authorize]

<div class="solo-container">
    <div class="game-setup-container">
        @if (GameService.GetGameId() != null)
        {
            <div class="grids-container">
                <div class="grid-section player-grid">
                    <h2> Grille du joueur</h2>
                    <PlayerGrid IsPlacingBoats="GameService.IsPlacingBoat()"
                                PositionsData="GameService.GetPlayerGrid().PositionsData"
                                OnTogglePlacingBoats="TogglePlacingBoats">
                    </PlayerGrid>
                </div>

                <div class="historique-container">
                    @foreach (var item in GameService.GetHistorique())
                    {
                        <p>@item</p>
                    }
                </div>

                <div class="grid-section opponent-grid">
                    <h2>Grille de l'adversaire</h2>
                    <OpponentGrid IsPlacingBoats="GameService.IsPlacingBoat()"
                                  PositionsData="GameService.GetOpponentGrid().PositionsData"
                                  OnAttack="HandleAttack">
                    </OpponentGrid>
                </div>
            </div>

            <div class="action-buttons">
                <button @onclick="OnRollback" class="rollback" disabled="@GameService.AreGridsEmpty()">Annuler le dernier coup</button>
            </div>
        }
        else
        {
            <p class="loading">Chargement...</p>
        }
    </div>
</div>

<style>
    .solo-container {
        padding: 2em;
    }

    .game-setup-container {
        display: flex;
        flex-direction: column;
        gap: 1.5em;
    }

    .grids-container {
        display: flex;
        justify-content: space-between;
        gap: 50px;
    }

    .grid-section {
        flex: 1;
        text-align: center;
    }

        .grid-section h2 {
            margin-bottom: 1em;
            font-size: 1.2em;
            color: white;
            font-weight: bold;
        }

    .historique-container {
        background-color: #f9f9f9;
        border: 1px solid #d1d1d1;
        border-radius: 10px;
        padding: 20px;
        width: 320px;
        max-height: 480px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

        .historique-container p {
            font-size: 0.9em;
            margin: 8px 0;
            line-height: 1.5;
            color: #555;
            padding: 8px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

            .historique-container p:hover {
                background-color: #e6f7ff;
            }

    .action-buttons {
        text-align: center;
    }

    .rollback {
        background-color: #7fc9ff;
        border: none;
        border-radius: 30px;
        color: #003366;
        font-size: 20px;
        font-weight: 600;
        cursor:pointer;
        padding: 15px 30px;
        width: 16em;
        transition: transform 0.3s ease, background-color 0.3s ease;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    }

    .rollback:disabled {
        cursor:not-allowed;
        background-color:lightgray;
    }
</style>

@code {
    public PlayerInfo User { get; set; }
    private void TogglePlacingBoats() => GameService.TogglePlacingBoat();

    private async Task HandleAttack(Position position)
    {
        await GameService.Attack(position);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GameService.StartGame();
        GameEventService.OnStateChanged += async () => await InvokeAsync(StateHasChanged);
        User = await UserService.LoadPlayerProfile();
    }

    private async Task OnRollback()
    {
        await GameService.Rollback();
    }
}
