@page "/game"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Grpc.GameService.GameServiceClient GameClient
@inject IModalService Modal

<PageTitle>BattleShip</PageTitle>

<main>
    @if (gameId != null)
    {
        <div class="grids">
            <div class="grid">
                @for (int row = 0; row < playerGrid.Positions.Length; row++)
                {
                    @for (int col = 0; col < playerGrid.Positions[0].Length; col++)
                    {
                        var currentRow = row;
                        var currentCol = col;

                        Position playerPosition = playerGrid.Positions[col][row].Position;
                        
                        <button disabled="disabled" class="cell"
                                style="background-color: @(GetCellColor(playerPosition))">
                            @if (IsBoatAtPosition(playerPosition))
                            {
                                <span>@GetBoatSymbol(playerPosition)</span>
                            }
                        </button>
                    }
                }
            </div>
            <div class="grid">
                @for (int row = 0; row < oponnentGrid.Positions.Length; row++)
                {
                    @for (int col = 0; col < oponnentGrid.Positions[0].Length; col++)
                    {
                        var currentRow = row;
                        var currentCol = col;

                        Position oponnentPosition = oponnentGrid.Positions[col][row].Position;

                        <button class="cell" @onclick="() => HandleCellClick(oponnentPosition)"
                                style="background-color: @(GetCellColor(oponnentPosition))">
                        </button>
                    }
                }
            </div>
        </div>
    }
    else
    {
        <p>Chargement ...</p>
    }
</main>

<style>
    .grids {
        display: flex;
        gap: 50px;
        justify-content: center;
        align-items: center;
    }

    .grid {
        display: grid;
        grid-template-columns: repeat(10, 1fr);
        grid-template-rows: repeat(10, 1fr);
        gap: 5px;
        background-color: #dce7f1;
        padding: 10px;
        border-radius: 10px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }

    .cell {
        width: 40px;
        height: 40px;
        border: 1px solid #b0c4de;
        border-radius: 4px;
        position: relative;
    }

    .cell:not([disabled]):hover {
        background-color: #7fc9ff;
        transform: scale(1.05);
    }

    .cell:not([disabled]) {
        cursor: pointer;
        transition: transform 0.2s, background-color 0.2s;
    }

    .boat-symbol {
        font-weight: bold;
        color: darkblue;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
</style>

@code {
    private Guid? gameId;
    private List<Boat>? boats;
    private Grid playerGrid = new Grid(10,10);
    private Grid oponnentGrid = new Grid(10,10);

    protected override async Task OnInitializedAsync()
    {
        var startGameRequest = new StartGameRequest();
        var startGameResponse = await GameClient.StartGameAsync(startGameRequest); 

        if (startGameResponse != null)
        {
            gameId = new Guid(startGameResponse.GameId);
            boats = startGameResponse.PlayerBoats.ToList();
        }
    }

    private bool IsBoatAtPosition(Position position, Boat boat)
    {
        return boat.Positions.Any(pos => pos.X == position.X && pos.Y == position.Y);
    }

    private bool IsBoatAtPosition(Position position)
    {
        foreach (var boat in boats)
        {
            if (IsBoatAtPosition(position, boat))
            {
                return true;
            }
        }
        return false;
    }

    private Boat? GetBoatAtPosition(Position position)
    {
        foreach (var boat in boats)
        {
            if (IsBoatAtPosition(position, boat))
            {
                return boat;
            }
        }
        return null;
    }

    private string GetBoatSymbol(Position position)
    {
        Boat? boat = GetBoatAtPosition(position);
        return boat != null ? boat.Name[0].ToString() : "";
    }

    private string GetCellColor(Position position)
    {
        return position != null && position.IsHit ? "red" : "white";
    }

    private async Task HandleCellClick(Position position)
    {
        Console.WriteLine($"Clicked on cell: {position.X},{position.Y}");
        await SendAttackRequest(position);
    }

    private Position? GetPosition(int col, int row, Boat boat)
    {
        Position? boatPosition = boat.Positions.FirstOrDefault(pos => pos.X == col && pos.Y == row);
        if(boatPosition != null)
        {
            return boatPosition;
        }
        return new PositionWrapper(col, row).Position;
    }

    private Position? GetPosition(int col, int row)
    {
        // Parcourt tous les bateaux dans la liste
        foreach (var boat in boats)
        {
            // Cherche la position dans le bateau actuel
            Position? boatPosition = boat.Positions.FirstOrDefault(pos => pos.X == col && pos.Y == row);

            // Si la position est trouvée, la retourne
            if (boatPosition != null)
            {
                return boatPosition;
            }
        }

        // Si aucune position correspondante n'est trouvée, crée une nouvelle position par défaut
        return new PositionWrapper(col, row).Position;
    }

    private Position? GetBoatPosition(int col, int row, Boat boat)
    {
        return boat.Positions.FirstOrDefault(pos => pos.X == col && pos.Y == row);
    }

    private bool BoatIsHit(int col, int row, Boat boat)
    {
        Position? boatPosition = GetBoatPosition(col, row, boat);
        return boatPosition != null && boatPosition.IsHit;
    }

    private async Task SendAttackRequest(Position position)
    {
        var attackRequest = new AttackRequest
        {
            GameId = gameId?.ToString(),
            AttackPosition = position
        };

        var attackResponse = await GameClient.AttackAsync(attackRequest);

        if (attackResponse != null)
        {
            if (attackResponse.PlayerAttackResult == "Hit")
            {
                position.IsHit = true;
                Console.WriteLine($"Hit : {position.X},{position.Y}");
                oponnentGrid.Positions[position.X][position.Y] = new PositionWrapper(position);
            }
            if (attackResponse.ComputerAttackResult == "Hit")
            {
                Position playerBoatPosition = attackResponse.ComputerAttackPosition;
                playerBoatPosition.IsHit = true;
                playerGrid.Positions[playerBoatPosition.X][playerBoatPosition.Y] = new PositionWrapper(playerBoatPosition);
            }
            StateHasChanged();
            await HandleGameResult(attackResponse);
        }
    }

    private async Task HandleGameResult(AttackResponse responseData)
    {

        if (responseData.IsPlayerWinner || responseData.IsComputerWinner)
        {
            string title = "";
            string message = "";
            if (responseData.IsPlayerWinner)
            {
                title = "Victoire !";
                message = "Vous avez gagné !";
            }
            if (responseData.IsComputerWinner)
            {
                title = "Défaite";
                message = "Vous avez perdu";
            }
            
            var modalResult = await ShowModal(title,message);
        }
    }

    private async Task<ModalResult> ShowModal(string title, string message)
    {
        var parameters = new ModalParameters();
        parameters.Add("Title", title);
        parameters.Add("Message", message);

        var modal = Modal.Show<GameModal>("Fin du jeu", parameters);
        return await modal.Result;
    }
}
